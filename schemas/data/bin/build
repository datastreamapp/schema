#!/usr/bin/env sh

maxEnumLength=1200

pre () {
	src=$1
	cp src/${src}.json src/${src}.build.json
}

deref () {
	src=$1
	opts=${*:2}

	cd src
	ajv deref ${src}.build.json ${opts} \
	    -o ${src}.build.json
	cd ..
}

clean () {
	src=$1
	cmd='del(.. | .["$vocabulary"]?, .["$id"]?, .["$comment"]?, '$2')'

	id=$(jq -r '.["$id"]' src/${src}.build.json)
	jq "${cmd}" src/${src}.build.json > src/${src}.build.tmp.json
	mv src/${src}.build.tmp.json src/${src}.build.json
	jq --arg id ${id} '{"$id":$id} + .' src/${src}.build.json > src/${src}.build.tmp.json
	mv src/${src}.build.tmp.json src/${src}.build.json
}

version () {
	src=$1
	version=$(jq -r '.version' package.json)
	jq --arg version ${version} '{"$comment":$version} + .' src/${src}.build.json > src/${src}.build.tmp.json
	mv src/${src}.build.tmp.json src/${src}.build.json
}

validate () {
	src=$1
	opts=${*:2}

	ajv validate src/${src}.build.json --valid ${opts} \
	    -r node_modules/wqx/json-schema/definitions.json \
		-r src/definitions.json
}

audit () {
	src=$1
	opts=${*:2}

	ajv audit src/${src}.build.json --fail ${opts} \
        -r node_modules/wqx/json-schema/definitions.json \
		-r src/definitions.json
}

transpile () {
	src=$1
	cmd='del(.. | .["$vocabulary"]?, .["$comment"]?, .title?, .description?, .__generated?'$2')'
	opts=${*:3}

	jq "${cmd}" src/${src}.build.json > ${src}/index.js
	ajv transpile ${src}/index.js ${opts} \
	    -r node_modules/wqx/json-schema/definitions.json \
		-r src/definitions.json  \
		-o ${src}/index.js
}

post () {
	src=$1
	mv src/${src}.build.json ${src}/index.json
}

locale () {
  LOCALE=${1}
  LANGUAGE=${LOCALE%-CA}

  ajv ftl src/locales/${1}.ftl \
	--locale ${LOCALE} --locale ${LANGUAGE} \
	-o locales/${LOCALE}.js

}

# primary - strict
pre primary
deref primary
clean primary '.errorMessage?'
version primary
validate primary
audit primary
post primary

# extract - strict, w/ coerce
pre extract
deref extract
clean extract '.title?, .description?'
validate extract
audit extract
transpile extract '' --loop-enum ${maxEnumLength} --coerce-types --use-defaults empty --all-errors
post extract

# frontend
pre frontend
deref frontend
clean frontend '.title?, .description?'
validate frontend
audit frontend
transpile frontend '' --loop-enum ${maxEnumLength} --coerce-types --use-defaults empty --all-errors
post frontend

# backend
pre backend
deref backend
clean backend '.title?, .description?, .errorMessage?'
validate backend
audit backend
transpile backend ', .errorMessage?' --loop-enum ${maxEnumLength} --coerce-types --use-defaults empty --all-errors
post backend

# quality-control
pre quality-control
deref quality-control
clean quality-control '.__?'
validate quality-control
# audit quality-control # Joined with other schemas above
transpile quality-control '' --loop-enum ${maxEnumLength}  --use-defaults empty --all-errors
post quality-control

# locales
locale en-CA
locale fr-CA

cp src/locales/*.json locales/

# values
find src/values -type f -name "*.legacy.json" | while IFS= read -r f; do cp "${f}" "database/$(basename -- ${f/.legacy/})"; done

# json-schema
mkdir -p json-schema/
pre definitions
deref definitions
clean definitions '.errorMessage?'
mv src/definitions.build.json json-schema/definitions.json
